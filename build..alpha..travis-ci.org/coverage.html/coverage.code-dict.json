{"/home/travis/build/npmtest/node-npmtest-image-watermark/test.js":"/* istanbul instrument in package npmtest_image_watermark */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-image-watermark/lib.npmtest_image_watermark.js":"/* istanbul instrument in package npmtest_image_watermark */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_image_watermark = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_image_watermark = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-image-watermark/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-image-watermark && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_image_watermark */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_image_watermark\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_image_watermark.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_image_watermark.rollup.js'] =\n            local.assetsDict['/assets.npmtest_image_watermark.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_image_watermark.__dirname +\n                    '/lib.npmtest_image_watermark.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-image-watermark/node_modules/image-watermark/watermark.js":"/**\n*\n*\tA powerful watermark library\n*   based on ImageMagick for node.js\n*\n**/\n\n// System Imports\nvar fs \t   = require('fs'),\n\tim     = require('imagemagick'),\n\tpath   = require('path'),\n\tratify = require('node-ratify');\n\nvar defaultOptions = {\n\t'text' \t\t\t\t    : 'Sample watermark',\n\t'override-image'\t: false,\n\t'change-format'\t\t: false,\n\t'output-format'\t\t: 'jpg',\n\t'position'\t\t\t  : 'Center',\n\t'color'\t\t\t\t    : 'rgba(0,0,0,0.4)',\n\t'resize' \t\t\t    : '100%'\n}\n\n//\n// Check if the alignment passed\n// is a valid alignment value\n//\n// Possible values of align are : dia1, dia2, ttb, btt, ltr, rtl\n//\nfunction _isValidAlignment(align) {\n\tif (ratify.isEmpty(align))\n\t\treturn false;\n\n\t//\n\t// dia1 : Diagonal 1\n\t// dia2 : Diagonal 2\n\t// ttb : top to bottom\n\t// btt : bottom to top\n\t// ltr : left to right\n\t// rtl : right to left\n\t//\n\tif (['dia1', 'dia2', 'ttb', 'btt', 'ltr', 'rtl'].indexOf(align.toLowerCase()) > -1)\n\t\treturn true;\n\n\treturn false;\n}\n\nfunction _parseOptions(imageData, source, options) {\n\n\tvar retObj = {};\n\n\tvar width = imageData.width;\n    var height = imageData.height;\n    var fillColor = options.color;\n    var watermarkText = options.text;\n    var align = _isValidAlignment(options.align) ? options.align.toLowerCase() : 'dia1';\n    var font = options.font;\n    var resize = options.resize ? options.resize : defaultOptions.resize;\n    var outputPath = options.dstPath ? options.dstPath : \n    \t\t\t\t path.dirname(source) + '/watermark' + path.extname(source);\n    var  position = null,\n    \t    angle = null,\n        pointsize = null;\n\n    // Check if fillColor is specified\n    if (ratify.isEmpty(fillColor))\n    \tfillColor = defaultOptions.color;\n\n    // Check if watermark text is specified\n    if (ratify.isEmpty(watermarkText))\n    \twatermarkText = defaultOptions.text;\n\n    // Check if position is specified\n    if (ratify.isEmpty(position))\n    \tposition = defaultOptions.position;\n\n  \t// Check if image needs to be overriden\n  \tif (options['override-image'] && ratify.isBoolean(options['override-image'])\n  \t\t&& options['override-image'].toString() === 'true') {\n  \t\toutputPath = source;\n  \t}\n\n  \t// Check if output format needs to be changed\n  \tif (options['change-format'] && ratify.isBoolean(options['change-format']) &&\n  \t\toptions['change-format'].toString() === 'true') {\n\n  \t\tvar outputFormat = options['output-format'];\n\n  \t\tif (ratify.isEmpty(outputFormat) || outputFormat.length < 2)\n  \t\t\toutputFormat = path.extname(source).substr(1);\n\n  \t\toutputPath = path.dirname(outputPath) + '/' + \n  \t\t\t\t\t path.basename(outputPath, path.extname(outputPath)) + \n  \t\t\t\t\t '.' + outputFormat;\n  \t}\n\n  \t// Check if extension of output path is valid\n  \tif (outputPath) {\n\n  \t\tvar ext = path.extname(outputPath).substr(1);\n\n  \t\tif (!ext || ext.length < 2)\n  \t\t\toutputPath = path.dirname(outputPath) + '/' + \n  \t\t\t\t\t\t path.basename(outputPath, path.extname(outputPath)) + \n  \t\t\t\t\t\t path.extname(source);\n  \t}\n\n  \tvar pointWidth = width,\n  \t\tpointHeight = height;\n\n  \tif (resize.toString().indexOf('%') == -1) {\n  \t\tresize = defaultOptions.resize;\n  \t} else {\n  \t\tvar resizeFactor = (parseFloat(resize) / 100);\n  \t\t\n  \t\tpointWidth = width * resizeFactor;\n  \t\tpointHeight = height * resizeFactor;\n  \t}\n\n  \tswitch(align) {\n  \t\tcase 'ltr'  :\n  \t\t\t\t\t\tangle = 0;\n  \t\t\t\t\t\tpointsize = (pointWidth / watermarkText.length);\n  \t\t\t\t\t\tbreak; \n  \t\tcase 'rtl'  : \n  \t\t\t\t\t\tangle = 180;\n  \t\t\t\t\t\tpointsize = (pointWidth / watermarkText.length);\n  \t\t\t\t\t\tbreak;\n  \t\tcase 'ttb'  :\n  \t\t\t\t\t\tangle = 90;\n  \t\t\t\t\t\tpointsize = (pointHeight / watermarkText.length);\n  \t\t\t\t\t\tbreak;\n  \t\tcase 'btt'  :\n  \t\t\t\t\t\tangle = 270;\n  \t\t\t\t\t\tpointsize = (pointHeight / watermarkText.length);\n  \t\t\t\t\t\tbreak;\n  \t\tcase 'dia1' :\n  \t\t\t\t\t\tangle = (Math.atan(height / width) * (180/Math.PI)) * -1;\n  \t\t\t\t\t\tpointsize = Math.sqrt(pointWidth * pointWidth + pointHeight * pointHeight) / watermarkText.length;\n  \t\t\t\t\t\tbreak;\n  \t\tcase 'dia2' :\n  \t\t\t\t\t\tangle = (Math.atan(height / width) * (180/Math.PI));\n  \t\t\t\t\t\tvar pointsize = Math.sqrt(pointWidth * pointWidth + pointHeight * pointHeight) / watermarkText.length;\n  \t\t\t\t\t\tbreak;\n  \t\tdefault     : \n              angle = (Math.atan(height / width) * (180/Math.PI)) * -1;\n              pointsize = Math.sqrt(pointWidth * pointWidth + pointHeight * pointHeight) / watermarkText.length;\n  \t\t\t\t\t\tbreak;\n  \t}\n\n    var args = [];\n    args.push(source); // original img path\n    args.push('-size');\n    args.push(width + 'x' + height);\n    args.push('-resize');\n    args.push(resize);\n    if (!ratify.isEmpty(font)) {\n    \targs.push('-font');\n    \targs.push(font);\n    }\n    args.push('-fill');\n    args.push(fillColor);  // color of watermark text\n    args.push('-pointsize');\n    args.push(pointsize); // this needs to be calculated dynamically based on image size and length of copyright message\n    args.push('-gravity');\n    args.push(position);    // alignment of watermark text.\n    args.push('-annotate');\n    args.push(angle);   // angle of watermark message, with respect to X-axis\n    args.push(watermarkText);  // copyright text\n    args.push(outputPath); // img with embedded watermark\n\n    retObj.args = args;\n    retObj.outputPath = outputPath;\n\n    return retObj;\n}\n\nfunction embedWatermark(source, options) {\n\n\tif (!source || source == '')\n\t\tthrow new Error('Image-Watermark::embedWatermark : Specified an invalid image source');\n\n\t// Check if file exists at the specified path\n\tstats = fs.lstatSync(source);\n\n\tif (!stats.isFile())\n\t\tthrow new Error('Image-Watermark::embedWatermark : Image does not exists at : ' + source);\t\t\n\n\t// If options are not properly specified, use default options\n\tif (!options || typeof options !== 'object')\n\t\toptions = defaultOptions;\n\n\t// If we reach here that means file exists\n\tim.identify(source, function (err, imageData) {\n\t  if (err)\n\t  \tthrow new Error('Image-Watermark::embedWatermark : Unable to process image file : ' + err);\n\n\t  var retObj = _parseOptions(imageData, source, options);\n\n\t  im.convert(retObj.args, function(err, stdout) {\n\t  \tif (err)\n\t    \tconsole.log('Image-Watermark::embedWatermark : Error in applying watermark : ' + err);\n\t    else \n\t      \tconsole.log('Image-Watermark::embedWatermark : Successfully applied watermark. Please check it at :\\n ' + retObj.outputPath);\n\t  });\n\t});\n}\n\nfunction embedWatermarkWithCb(source, options, callback) {\n\n\tvar error;\n\t\n\tif ((arguments.length < 2) ||\n\t\t(arguments.length === 2 && !ratify.isFunction(arguments[1])) ||\n\t\t(arguments.length > 2 && !ratify.isFunction(arguments[2]))) {\n\t\tthrow new Error('Image-Watermark::embedWatermarkWithCb : Invalid arguments to method embedWatermarkWithCb');\n\t} else if (arguments.length === 2 && ratify.isFunction(arguments[1])) {\n\t\tcallback = arguments[1];\n\t\toptions = null;\n\t}\n\n\tif (!source || source == '') {\n\t\terror = new Error('Image-Watermark::embedWatermarkWithCb : Specified an invalid image source');\n\t\treturn callback(error);\n\t}\n\n\t// Check if file exists at the specified path\n\tfs.lstat(source, function(err, stats) {\n\t\tif (err || !stats.isFile()) {\n\t\t\terror = new Error('Image-Watermark::embedWatermarkWithCb : Image file doesn\\'t exists at ' + source);\n\t\t\treturn callback(error);\n\t\t} else if (!err) {\n\n\t\t\t// If options are not properly specified, use default options\n\t\t\tif (!options || typeof options !== 'object')\n\t\t\t\toptions = defaultOptions;\n\n\t\t\t// If we reach here that means file exists\n\t\t\tim.identify(source, function (err, imageData) {\n\t\t\t\tif (err) {\n\t\t\t  \t\terror = new Error('Image-Watermark::embedWatermarkWithCb : Unable to process image file : ' + err);\n\t\t\t  \t\treturn callback(error);\n\t\t\t  \t}\n\n\t\t\t  \tvar retObj = _parseOptions(imageData, source, options);\n\n\t\t        im.convert(retObj.args, function(err, stdout) {\n\t\t            if (err) {\n\t\t            \terror = new Error('Image-Watermark::embedWatermarkWithCb : Error in applying watermark : ' + err);\n\t\t            \treturn callback(error);\n\t\t            } else {\n\t\t            \tconsole.log('Image-Watermark::embedWatermarkWithCb : Successfully applied watermark. Please check it at :\\n ' + retObj.outputPath);\n\t\t            \treturn callback(null);\n\t\t            }\n\t\t        });\n\t\t\t});\n\t\t}\n\t});\n\t\n\treturn;\n}\n\n\nexports = module.exports = {\n\tembedWatermark \t\t    : embedWatermark,\n\tembedWatermarkWithCb  : embedWatermarkWithCb,\n\tversion\t\t   \t\t      : JSON.parse(\n  \t\t\t\t\t\t\t           require('fs').readFileSync(__dirname + '/package.json', 'utf8')\n\t\t\t\t\t \t               ).version\n};\n"}